★ MFRC522 초기화 부분 ★

- 참고 URL :
In-Depth: What is RFID? How It Works? Interface RC522 with Arduino (lastminuteengineers.com)
MFRC522 Standard performance MIFARE and NTAG frontend (nxp.com)
라즈이노 iOT :: 【 아두이노모듈#11】 RFID (RC522) 사용하기 #1 (tistory.com)

Q)
MFRC522 초기화 작업 시 MFRC522 모듈의 정보를 spi통신을 통해, beaglebone ai-64 보드로 가져오기 위해선 정확히 어떤 레지스터 값들의 코드를 넣어줘야하냐?

A)
MFRC522 모듈의 정보를 SPI 통신을 통해 BeagleBone AI-64 보드로 가져오기 위해서는 일련의 레지스터 값들을 읽어와야 합니다. 다음은 일반적인 MFRC522 초기화 작업에서 가져올 수 있는 몇 가지 중요한 레지스터 값들의 예시입니다:

1. 제조사 정보 (Manufacturer Data):
	레지스터 주소: 0x37
	읽기 동작을 통해 값을 가져올 수 있습니다.
2. 버전 정보 (Version Data):
	레지스터 주소: 0x37
	읽기 동작을 통해 값을 가져올 수 있습니다.
3. 칩 ID (Chip ID):
	레지스터 주소: 0x00, 0x01, 0x02
	읽기 동작을 통해 값을 가져올 수 있습니다.
이는 일부 중요한 레지스터 값들의 예시입니다. 실제로 MFRC522 모듈의 레지스터 맵과 해당 정보를 가져오기 위한 정확한 레지스터 주소와 읽기 동작에 대한 세부 사항은 MFRC522 데이터 시트를 참고해야 합니다. 데이터 시트에는 레지스터 맵과 관련된 정보가 자세히 기술되어 있으며, 필요한 레지스터 값을 가져오기 위한 적절한 코드를 작성할 수 있습니다.


Q)
위의 코드에 타이머와 네트워크 관련 코드를 추가하면 어떻게 되냐

A)
MFRC522 모듈의 타이머와 네트워크 관련 설정은 해당 모듈의 레지스터와 기능에 따라 다를 수 있습니다. 타이머와 네트워크 관련 설정을 추가하기 위해서는 MFRC522 데이터 시트와 레지스터 맵을 자세히 확인하여 해당 기능에 대한 레지스터 주소와 설정 값을 찾아야 합니다.

일반적으로 MFRC522 모듈에서 타이머와 네트워크 관련 설정은 다음과 같은 레지스터들을 사용합니다:

1. 타이머 관련 레지스터:
	Timer Control Register (TModeReg)
	Timer Reload Value Registers (TPrescalerReg, TReloadReg1, TReloadReg2)
	Timer Value Registers (TCounterValueReg1, TCounterValueReg2)
2. 네트워크 관련 레지스터:
	Tx/Rx Control Register (TxControlReg, RxControlReg)
	Rx Mode Register (RxModeReg)
	Modulation and Demodulation Register (ModWidthReg)
	Bit Framing Register (BitFramingReg)
따라서, MFRC522 모듈의 타이머와 네트워크 관련 설정을 추가하려면 위의 레지스터들에 대한 코드를 작성해야 합니다. 각 레지스터의 역할과 설정 값은 MFRC522 데이터 시트에서 자세히 설명되어 있으므로, 해당 문서를 참고하여 설정 값을 찾아 코드에 추가할 수 있습니다.

아래는 예시로 MFRC522 모듈의 타이머와 네트워크 관련 설정을 추가한 코드입니다. 이 코드는 예시일 뿐 실제로는 MFRC522 데이터 시트를 참고하여 적절한 레지스터 주소와 설정 값을 사용해야 합니다.


// MFRC522 초기화
void mfrc522_init()
    // 제조사 정보 읽기 예시
    uint8_t manufacturerData = readRegister(0x37);
    printf("Manufacturer Data: 0x%02X\n", manufacturerData);

    // 버전 정보 읽기 예시
    uint8_t versionData = readRegister(0x37);
    printf("Version Data: 0x%02X\n", versionData);

    // 칩 ID 읽기 예시
    uint8_t chipID[3] = {
        readRegister(0x00),
        readRegister(0x01),
        readRegister(0x02)
    };
    printf("Chip ID: 0x%02X%02X%02X\n", chipID[0], chipID[1], chipID[2]);

    // 타이머 관련 설정 예시
    uint8_t timerControlValue = readRegister(0x2A);
    printf("Timer Control Value: 0x%02X\n", timerControlValue);

    uint8_t timerReloadValue1 = readRegister(0x2C);
    printf("Timer Reload Value 1: 0x%02X\n", timerReloadValue1);

    uint8_t timerReloadValue2 = readRegister(0x2D);
    printf("Timer Reload Value 2: 0x%02X\n", timerReloadValue2);

    // UART 네트워크 관련 설정 예시
    uint8_t txControlValue = readRegister(0x14);
    printf("Tx Control Value: 0x%02X\n", txControlValue);

    uint8_t rxControlValue = readRegister(0x15);
    printf("Rx Control Value: 0x%02X\n", rxControlValue);

    uint8_t rxModeValue = readRegister(0x11);
    printf("Rx Mode Value: 0x%02X\n", rxModeValue);

    uint8_t modulationValue = readRegister(0x24);
    printf("Modulation Value: 0x%02X\n", modulationValue);

    uint8_t bitFramingValue = readRegister(0x0D);
    printf("Bit Framing Value: 0x%02X\n", bitFramingValue);
}

int main()
{

    // SPI 장치 파일 열기
    spi_fd = open(spiDevice, O_RDWR);

    // SPI 통신 초기화
    if (spi_init() != 0) {
        return 1;
    }

    // UART 통신 초기화
    if (uart_init() != 0) {
        return 1;
    }

    // MFRC522 초기화 및 UID 정보 읽기
    while (1) {
        mfrc522_read_uid();
        usleep(500000);
    }

    // 파일 디스크립터 닫기
    close(spi_fd);
    close(uart_fd);

    return 0;
}

